// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: bank.sql

package db

import (
	"context"
)

const createBank = `-- name: CreateBank :one
INSERT INTO banks (
  bank_name,
  icon,
  account_number,
  shop_id
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, bank_name, icon, account_number, shop_id, created_at
`

type CreateBankParams struct {
	BankName      string `json:"bank_name"`
	Icon          string `json:"icon"`
	AccountNumber string `json:"account_number"`
	ShopID        int32  `json:"shop_id"`
}

func (q *Queries) CreateBank(ctx context.Context, arg CreateBankParams) (Bank, error) {
	row := q.db.QueryRowContext(ctx, createBank,
		arg.BankName,
		arg.Icon,
		arg.AccountNumber,
		arg.ShopID,
	)
	var i Bank
	err := row.Scan(
		&i.ID,
		&i.BankName,
		&i.Icon,
		&i.AccountNumber,
		&i.ShopID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBank = `-- name: DeleteBank :exec
DELETE FROM banks
WHERE id = $1
`

func (q *Queries) DeleteBank(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBank, id)
	return err
}

const getBankById = `-- name: GetBankById :one
SELECT id, bank_name, icon, account_number, shop_id, created_at FROM banks
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBankById(ctx context.Context, id int32) (Bank, error) {
	row := q.db.QueryRowContext(ctx, getBankById, id)
	var i Bank
	err := row.Scan(
		&i.ID,
		&i.BankName,
		&i.Icon,
		&i.AccountNumber,
		&i.ShopID,
		&i.CreatedAt,
	)
	return i, err
}

const listMyBanks = `-- name: ListMyBanks :many
SELECT id, bank_name, icon, account_number, shop_id, created_at FROM banks
WHERE shop_id = $1
ORDER BY id 
LIMIT $2
OFFSET $3
`

type ListMyBanksParams struct {
	ShopID int32 `json:"shop_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMyBanks(ctx context.Context, arg ListMyBanksParams) ([]Bank, error) {
	rows, err := q.db.QueryContext(ctx, listMyBanks, arg.ShopID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Bank{}
	for rows.Next() {
		var i Bank
		if err := rows.Scan(
			&i.ID,
			&i.BankName,
			&i.Icon,
			&i.AccountNumber,
			&i.ShopID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBank = `-- name: UpdateBank :one
UPDATE banks
SET bank_name = $1,
    account_number = $2,
    icon = $3
WHERE id = $4
RETURNING id, bank_name, icon, account_number, shop_id, created_at
`

type UpdateBankParams struct {
	BankName      string `json:"bank_name"`
	AccountNumber string `json:"account_number"`
	Icon          string `json:"icon"`
	ID            int32  `json:"id"`
}

func (q *Queries) UpdateBank(ctx context.Context, arg UpdateBankParams) (Bank, error) {
	row := q.db.QueryRowContext(ctx, updateBank,
		arg.BankName,
		arg.AccountNumber,
		arg.Icon,
		arg.ID,
	)
	var i Bank
	err := row.Scan(
		&i.ID,
		&i.BankName,
		&i.Icon,
		&i.AccountNumber,
		&i.ShopID,
		&i.CreatedAt,
	)
	return i, err
}
