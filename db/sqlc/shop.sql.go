// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: shop.sql

package db

import (
	"context"
)

const countShops = `-- name: CountShops :one
SELECT COUNT(id) FROM shops
WHERE user_id = $1
`

func (q *Queries) CountShops(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, countShops, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createShop = `-- name: CreateShop :one
INSERT INTO shops (
  shop_name,
  shop_type,
  address,
  user_id
) VALUES (
  $1, $2, $3,$4
)
RETURNING id, shop_name, shop_type, address, user_id, created_at
`

type CreateShopParams struct {
	ShopName string `json:"shop_name"`
	ShopType string `json:"shop_type"`
	Address  string `json:"address"`
	UserID   int32  `json:"user_id"`
}

func (q *Queries) CreateShop(ctx context.Context, arg CreateShopParams) (Shop, error) {
	row := q.db.QueryRowContext(ctx, createShop,
		arg.ShopName,
		arg.ShopType,
		arg.Address,
		arg.UserID,
	)
	var i Shop
	err := row.Scan(
		&i.ID,
		&i.ShopName,
		&i.ShopType,
		&i.Address,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteShop = `-- name: DeleteShop :exec
DELETE FROM shops
WHERE id = $1
`

func (q *Queries) DeleteShop(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteShop, id)
	return err
}

const getShopById = `-- name: GetShopById :one
SELECT id, shop_name, shop_type, address, user_id, created_at FROM shops
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetShopById(ctx context.Context, id int32) (Shop, error) {
	row := q.db.QueryRowContext(ctx, getShopById, id)
	var i Shop
	err := row.Scan(
		&i.ID,
		&i.ShopName,
		&i.ShopType,
		&i.Address,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const listMyShops = `-- name: ListMyShops :many
SELECT id, shop_name, shop_type, address, user_id, created_at FROM shops
WHERE user_id = $1
ORDER BY id 
LIMIT $2
OFFSET $3
`

type ListMyShopsParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMyShops(ctx context.Context, arg ListMyShopsParams) ([]Shop, error) {
	rows, err := q.db.QueryContext(ctx, listMyShops, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Shop{}
	for rows.Next() {
		var i Shop
		if err := rows.Scan(
			&i.ID,
			&i.ShopName,
			&i.ShopType,
			&i.Address,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShopDetail = `-- name: UpdateShopDetail :one
UPDATE shops
SET 
    shop_name = $2,
    shop_type = $3,
    address = $4
WHERE id = $1
RETURNING id, shop_name, shop_type, address, user_id, created_at
`

type UpdateShopDetailParams struct {
	ID       int32  `json:"id"`
	ShopName string `json:"shop_name"`
	ShopType string `json:"shop_type"`
	Address  string `json:"address"`
}

func (q *Queries) UpdateShopDetail(ctx context.Context, arg UpdateShopDetailParams) (Shop, error) {
	row := q.db.QueryRowContext(ctx, updateShopDetail,
		arg.ID,
		arg.ShopName,
		arg.ShopType,
		arg.Address,
	)
	var i Shop
	err := row.Scan(
		&i.ID,
		&i.ShopName,
		&i.ShopType,
		&i.Address,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}
