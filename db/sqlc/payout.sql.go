// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: payout.sql

package db

import (
	"context"
	"time"
)

const createPayout = `-- name: CreatePayout :one
INSERT INTO payouts (
  particular,
  amount,
  recipient,
  payment_type,
  shop_id
) VALUES (
  $1, $2, $3,$4, $5
)
RETURNING id, particular, amount, recipient, payment_type, shop_id, created_at
`

type CreatePayoutParams struct {
	Particular  string `json:"particular"`
	Amount      int32  `json:"amount"`
	Recipient   string `json:"recipient"`
	PaymentType string `json:"payment_type"`
	ShopID      int32  `json:"shop_id"`
}

func (q *Queries) CreatePayout(ctx context.Context, arg CreatePayoutParams) (Payout, error) {
	row := q.db.QueryRowContext(ctx, createPayout,
		arg.Particular,
		arg.Amount,
		arg.Recipient,
		arg.PaymentType,
		arg.ShopID,
	)
	var i Payout
	err := row.Scan(
		&i.ID,
		&i.Particular,
		&i.Amount,
		&i.Recipient,
		&i.PaymentType,
		&i.ShopID,
		&i.CreatedAt,
	)
	return i, err
}

const deletePayout = `-- name: DeletePayout :exec
DELETE FROM payouts
WHERE id = $1
`

func (q *Queries) DeletePayout(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePayout, id)
	return err
}

const getPayoutById = `-- name: GetPayoutById :one
SELECT id, particular, amount, recipient, payment_type, shop_id, created_at FROM payouts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPayoutById(ctx context.Context, id int32) (Payout, error) {
	row := q.db.QueryRowContext(ctx, getPayoutById, id)
	var i Payout
	err := row.Scan(
		&i.ID,
		&i.Particular,
		&i.Amount,
		&i.Recipient,
		&i.PaymentType,
		&i.ShopID,
		&i.CreatedAt,
	)
	return i, err
}

const listMyPayouts = `-- name: ListMyPayouts :many
SELECT id, particular, amount, recipient, payment_type, shop_id, created_at FROM payouts
WHERE shop_id = $1
ORDER BY id 
LIMIT $2
OFFSET $3
`

type ListMyPayoutsParams struct {
	ShopID int32 `json:"shop_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMyPayouts(ctx context.Context, arg ListMyPayoutsParams) ([]Payout, error) {
	rows, err := q.db.QueryContext(ctx, listMyPayouts, arg.ShopID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Payout{}
	for rows.Next() {
		var i Payout
		if err := rows.Scan(
			&i.ID,
			&i.Particular,
			&i.Amount,
			&i.Recipient,
			&i.PaymentType,
			&i.ShopID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchBetweenDates = `-- name: SearchBetweenDates :many
SELECT id, particular, amount, recipient, payment_type, shop_id, created_at FROM payouts
WHERE shop_id = $1 AND created_at BETWEEN $2 AND $3
ORDER BY id 
LIMIT $4
OFFSET $5
`

type SearchBetweenDatesParams struct {
	ShopID      int32     `json:"shop_id"`
	CreatedAt   time.Time `json:"created_at"`
	CreatedAt_2 time.Time `json:"created_at_2"`
	Limit       int32     `json:"limit"`
	Offset      int32     `json:"offset"`
}

func (q *Queries) SearchBetweenDates(ctx context.Context, arg SearchBetweenDatesParams) ([]Payout, error) {
	rows, err := q.db.QueryContext(ctx, searchBetweenDates,
		arg.ShopID,
		arg.CreatedAt,
		arg.CreatedAt_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Payout{}
	for rows.Next() {
		var i Payout
		if err := rows.Scan(
			&i.ID,
			&i.Particular,
			&i.Amount,
			&i.Recipient,
			&i.PaymentType,
			&i.ShopID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
